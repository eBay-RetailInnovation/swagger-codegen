{{#operations}}
public class {{classname}}
{
}


{{#operation}}
{{#returnBaseType}}
extension {{returnBaseType}}
{{/returnBaseType}}
{{^returnBaseType}}
extension {{classname}}
{{/returnBaseType}}
{
    /**
    {{{summary}}}
    {{#notes}}
    {{{notes}}}
    {{/notes}}

    {{#allParams}}
    !{{paramName}} {{description}}
    {{/allParams}}
    */
    public class func {{nickname}}({{#allParams}}{{paramName}}: {{{dataType}}}, {{/allParams}}completion: {{#returnBaseType}}(output: {{returnType}}) -> () {{/returnBaseType}}{{^returnBaseType}}() -> () {{/returnBaseType}}, failure: (error: NSError?) -> ())
    {
        var path = "{{path}}"
        {{#pathParams}}
        path = path.stringByReplacingOccurrencesOfString("{" + "{{baseName}}" + "}", withString: "\({{paramName}})")
        {{/pathParams}}
        
        if let URL = NSURL(string: path)
        {
            let builder = SVRequestParameterBuilder(URL: URL, method: .{{httpMethod}})
    
            {{#formParams}}
            builder["{{baseName}}"] = "\({{paramName}})"
            {{/formParams}}
    
            {{#queryParams}}
            builder["{{baseName}}"] = "\({{paramName}})"
            {{/queryParams}}
            
            {{#bodyParams}}
            for (key, value) in {{paramName}}.dictionaryRepresentation()
            {
                if !(value is NSNull)
                {
                    builder[key] = "\(value)"
                }
            }
            {{/bodyParams}}
    
            {{#headerParams}}
            builder.headers["{{baseName}}"] = "\({{paramName}})"
            {{/headerParams}}
            
            SVRequest(request: builder.request).JSON(
                { (handler, JSON, response) in
                    let statusCode = (response as NSHTTPURLResponse).statusCode
                    
                    switch statusCode {
                        {{#errorList}}
                        
                        case {{code}}:
                        {{#returnBaseType}}
                        {{#responseModel}}
                        
                        {{#returnContainer}}
                        if let JSONArray = JSON.basicArray as? [[String:AnyObject]]
                        {
                            let array: {{returnType}} = RIBuildModelArray(JSONArray)
                            completion(output: array)
                        }
                        else
                        {
                            failure(error: RICreateError("Failed to extract JSON array", URL, {{code}}))
                        }
                        {{/returnContainer}}
                        
                        {{^returnContainer}}
                        if let JSONObject = JSON.basicObject
                        {
                            if let model = {{returnBaseType}}(dictionary: JSONObject)
                            {
                                completion(output: model)
                            }
                            else
                            {
                                failure(error: RICreateError("Failed to create model", URL, {{code}}))
                            }
                        }
                        else
                        {
                            failure(error: RICreateError("Failed to extract JSON object", URL, {{code}}))
                        }
                        {{/returnContainer}}
                        {{/responseModel}}
                        
                        {{^responseModel}}
                        failure(error: RICreateError("{{reason}}", URL, {{code}}))
                        {{/responseModel}}
                        {{/returnBaseType}}
                        
                        {{^returnBaseType}}
                        if statusCode >= 200 && statusCode < 300
                        {
                            completion()
                        }
                        else
                        {
                            failure(error: RICreateError("{{reason}}", URL, {{code}}))
                        }
                        {{/returnBaseType}}
                        
                        {{/errorList}}
                        default:
                            failure(error: RICreateError("Unsupported response code: \(statusCode)", URL, statusCode))
                    }
                },
                failure: { (handler, error, response) in
                    failure(error: error)
                }
            )
        }
    }
}

{{/operation}}
{{/operations}}