{{#operations}}
public class {{classname}}
{
}


{{#operation}}
{{#returnBaseType}}
extension {{returnType}}
{{/returnBaseType}}
{{^returnBaseType}}
extension {{classname}}
{{/returnBaseType}}
{
    /**
    {{{summary}}}
    {{#notes}}
    {{{notes}}}
    {{/notes}}

    {{#allParams}}
    !{{paramName}} {{description}}
    {{/allParams}}
    */
    public class func {{nickname}}({{#allParams}}{{paramName}}: {{{dataType}}}, {{/allParams}}completion: {{#returnBaseType}}(output: {{returnType}}) -> () {{/returnBaseType}}{{^returnBaseType}}() -> () {{/returnBaseType}}, failure: (error: NSError?) -> ())
    {
        var path = "{{path}}"
        {{#pathParams}}
        path = path.stringByReplacingOccurrencesOfString("{" + "{{paramName}}" + "}", withString: "\({{paramName}})")
        {{/pathParams}}
        
        if let URL = NSURL(string: path)
        {
            let builder = SVRequestParameterBuilder(URL: URL, method: .{{httpMethod}})
    
            {{#formParams}}
            builder["{{baseName}}"] = "\({{paramName}})"
            {{/formParams}}
    
            {{#queryParams}}
            builder["{{baseName}}"] = "\({{paramName}})"
            {{/queryParams}}
            
            {{#bodyParams}}
            for (key, value) in {{paramName}}.dictionaryRepresentation()
            {
                if !(value is NSNull)
                {
                    builder[key] = "\(value)"
                }
            }
            {{/bodyParams}}
    
            {{#headerParams}}
            builder.headers["{{baseName}}"] = "\({{paramName}})"
            {{/headerParams}}
        }
    }
}

{{/operation}}
{{/operations}}