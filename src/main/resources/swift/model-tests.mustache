import RetailInnovation
import XCTest

{{#models}}
{{#model}}

class {{classname}}Tests: XCTestCase
{
    class func testingDictionary() -> [String:AnyObject]
    {
        {{#hasVars}}
        return [
            {{#vars}}
            "{{baseName}}": {{#complexType}}{{#isContainer}}[{{baseDataType}}Tests.testingDictionary()]{{/isContainer}}{{^isContainer}}{{baseDataType}}Tests.testingDictionary(){{/isContainer}}{{/complexType}}{{^complexType}}{{{defaultValue}}}{{/complexType}}{{#hasMore}},{{/hasMore}}{{newline}}
            {{/vars}}
        ]
        {{/hasVars}}
        {{^hasVars}}
        return [:]
        {{/hasVars}}
    }
    
    func testParse()
    {
        let dictionary = {{classname}}Tests.testingDictionary()
        let maybeModel = {{classname}}(dictionary: dictionary)
        XCTAssertNotNil(maybeModel, "{{classname}} did not parse correctly")
        
        if let model = maybeModel
        {
            XCTAssertTrue(model.dictionaryRepresentation() == dictionary, "Dictionary representation of {{classname}} not equal to input")
        }
    }
}

{{/model}}
{{/models}}