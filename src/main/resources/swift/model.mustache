{{#models}}
{{#model}}
public class {{classname}}: RIModel
{
    {{#hasVars}}
    // MARK: - Properties
    {{/hasVars}}
    {{#vars}}
    {{#description}}
    /**
    {{{description}}}
     */
    {{/description}}
    private(set) public var {{name}}: {{datatype}}{{#required}}! {{/required}}{{^required}}? {{/required}} = nil
    {{newline}}
    {{/vars}}
    
    // MARK: - Initialization
    {{#hasVars}}
    public init({{#vars}}{{name}}: {{datatype}}{{^required}}?{{/required}}{{#hasMore}}, {{/hasMore}}{{/vars}})
    {
        super.init()
        
        {{#vars}}
        self.{{name}} = {{name}}
        {{/vars}}
    }
    {{/hasVars}}
    
    override init()
    {
        super.init()
    }
    
    public convenience required init?(dictionary: [String: AnyObject])
    {
        {{#vars}}
        
        {{#complexType}}
        
        {{#isContainer}}
        if let {{name}}: {{#required}}{{datatype}} {{/required}}{{^required}}{{datatype}}? {{/required}} = (dictionary["{{baseName}}"] as? [[String:AnyObject]]).ri_flatMap(RIBuildModelArray)
        {
        {{/isContainer}}
        
        {{^isContainer}}
        if let {{name}} = (dictionary["{{baseName}}"] as? [String:AnyObject]).ri_flatMap({ (dictionary) in {{datatype}}(dictionary: dictionary) })
        {
        {{/isContainer}}
        
        {{/complexType}}
        
        {{^complexType}}
        if let {{name}}: {{#required}}{{datatype}} {{/required}}{{^required}}{{datatype}}? {{/required}} = dictionary["{{baseName}}"].ri_flatMap(RIParsePrimitive)
        {
        {{/complexType}}
        {{/vars}}
        
        self.init({{#vars}}{{name}}: {{name}}{{#hasMore}}, {{/hasMore}}{{/vars}})
        
        {{#vars}}
        }
        else
        {
            self.init()
            return nil
        }
        {{/vars}}
    }
    
    public required init(forcedDictionary: [String: AnyObject])
    {
        super.init()
        
        {{#vars}}
        self.{{name}} = ((forcedDictionary["{{baseName}}"] as? {{#isContainer}}{{#complexType}}[[String:AnyObject]]).map(RIBuildModelArray){{/complexType}}{{^complexType}}[{{datatype}}]){{/complexType}}{{/isContainer}}{{^isContainer}}{{#complexType}}[String:AnyObject]).ri_flatMap({ (data) in {{datatype}}(dictionary: data)}){{/complexType}}{{^complexType}}{{datatype}}){{/complexType}}{{/isContainer}}){{#required}}!{{/required}}{{newline}}
        {{/vars}}
    }
    
    // MARK: - Dictionary Conversion
    public override func dictionaryRepresentation() -> [String: AnyObject]
    {
        var dictionary: [String: AnyObject] = [:]
        
        {{#vars}}
        dictionary["{{baseName}}"] = (self.{{name}}{{#complexType}}{{#isContainer}}{{^required}}?{{/required}}.map({ ({{nameSingular}}) in {{nameSingular}}.dictionaryRepresentation() }){{/isContainer}}{{#isNotContainer}}{{^required}}?{{/required}}.dictionaryRepresentation(){{/isNotContainer}}{{/complexType}}) {{^required}} ?? NSNull(){{/required}}{{newline}}
        {{/vars}}
        
        return dictionary
    }
    
    // MARK: - Updating
    public override func parseDictionary(dictionary: [String: AnyObject])
    {
        {{#vars}}
        
        {{#complexType}}
        
        {{#isContainer}}
        if let {{name}}: {{#required}}{{datatype}} {{/required}}{{^required}}{{datatype}}? {{/required}} = (dictionary["{{baseName}}"] as? [[String:AnyObject]]).ri_flatMap(RIBuildModelArray)
        {
            self.{{name}} = {{name}}
        }
        {{/isContainer}}
        
        {{^isContainer}}
        if let {{name}} = (dictionary["{{baseName}}"] as? [String:AnyObject]).ri_flatMap({ (dictionary) in {{datatype}}(dictionary: dictionary) })
        {
            self.{{name}} = {{name}}
        }
        {{/isContainer}}
        
        {{/complexType}}
        
        {{^complexType}}
        if let {{name}}: {{#required}}{{datatype}} {{/required}}{{^required}}{{datatype}}? {{/required}} = dictionary["{{baseName}}"].ri_flatMap(RIParsePrimitive)
        {
            self.{{name}} = {{name}}
        }
        {{/complexType}}
        {{/vars}}
    }
}
{{/model}}
{{/models}}