{{#models}}
{{#model}}
public class {{classname}}: RIModel
{
    // MARK: - Properties
    {{#vars}}
    {{#description}}
    /**
    {{{description}}}
     */
    {{/description}}
    private(set) public var {{name}}: {{datatype}}{{^required}}?{{/required}}
    {{newline}}
    {{/vars}}
    
    // MARK: - Initialization
    public required init({{#vars}}{{name}}: {{datatype}}{{^required}}?{{/required}}{{#hasMore}}, {{/hasMore}}{{/vars}})
    {
        {{#vars}}
        self.{{name}} = {{name}}
        {{/vars}}
    }
    
    public class func create(dictionary: [String: AnyObject]) -> Self?
    {
        {{#vars}}
        {{#required}}
        if let {{name}} = dictionary["{{baseName}}"] as? {{datatype}}
        {
        {{/required}}
        {{^required}}
        if let {{name}} = dictionary["{{baseName}}"] as? {{datatype}}?
        {
        {{/required}}
        {{/vars}}
        
        return self({{#vars}}{{name}}: {{name}}{{#hasMore}}, {{/hasMore}}{{/vars}})
        
        {{#vars}}
        }
        else
        {
            return nil
        }
        {{/vars}}
    }
    
    public required init(forcedDictionary: [String: AnyObject])
    {
        {{#vars}}
        self.{{name}} = ((forcedDictionary["{{baseName}}"] as? {{#isContainer}}{{#complexType}}[[String:AnyObject]]).map(RIBuildModelArray){{/complexType}}{{^complexType}}[{{datatype}}]){{/complexType}}{{/isContainer}}{{^isContainer}}{{#complexType}}[String:AnyObject]).ri_flatMap({ (data) in {{datatype}}.create(data)}){{/complexType}}{{^complexType}}{{datatype}}){{/complexType}}{{/isContainer}}){{#required}}!{{/required}}{{newline}}
        {{/vars}}
    }
    
    // MARK: - Dictionary Conversion
    public func dictionaryRepresentation() -> [String: AnyObject]
    {
        var dictionary: [String: AnyObject] = [:]
        
        {{#vars}}
        dictionary["{{baseName}}"] = (self.{{name}}{{#complexType}}{{#isContainer}}{{^required}}?{{/required}}.map({ ({{nameSingular}}) in {{nameSingular}}.dictionaryRepresentation() }){{/isContainer}}{{#isNotContainer}}{{^required}}?{{/required}}.dictionaryRepresentation(){{/isNotContainer}}{{/complexType}}) {{^required}} ?? NSNull(){{/required}}{{newline}}
        {{/vars}}
        
        return dictionary
    }
    
    // MARK: - Updating
    public func parseDictionary(dictionary: [String: AnyObject])
    {
        {{#vars}}
        if let {{name}}: {{#required}}{{datatype}} {{/required}}{{^required}}{{datatype}}? {{/required}} = ((dictionary["{{baseName}}"] as? {{#complexType}}{{#isContainer}}[AnyObject]{{^required}}?{{/required}}){{/isContainer}}{{#isNotContainer}}[String: AnyObject]{{^required}}?{{/required}}).ri_flatMap({ (dictionary) in {{datatype}}(dictionary: dictionary) })){{/isNotContainer}}{{/complexType}}{{^complexType}}{{datatype}}{{^required}}?{{/required}})){{/complexType}}
        {
            self.{{name}} = {{name}}
        }
        {{/vars}}
    }
}
{{/model}}
{{/models}}